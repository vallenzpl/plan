public class Test15 {


    static class ListNode{

        int value;
        ListNode next;

        public ListNode(){

        }

        public ListNode(int value, ListNode next) {
            this.value = value;
            this.next = next;
        }
    }





    public static void main(String[] args) {

        ListNode header = new ListNode(31, null);
        addNode(header, new ListNode(43, null));
        addNode(header, new ListNode(54, null));
        addNode(header, new ListNode(87, null));
        addNode(header, new ListNode(2, null));
        addNode(header, new ListNode(6, null));
        addNode(header, new ListNode(873, null));

        ListNode tail = header;
        while (tail !=null) {
            System.out.print(tail.value + " ");
            tail = tail.next;
        }
        System.out.println();
        System.out.println("-- 结果：");


//        findK(header, 0);
        findMiddle(header);

//        header = revert(header);
//        header = revert3(header);
//        header = reverseListDi(header);

//        tail = header;
//        while (tail !=null) {
//            System.out.print(tail.value + " ");
//            tail = tail.next;
//        }
    }









    public static void findK(ListNode header, int target){
        ListNode tail = header;
        int index = 0;
        while (tail.next !=null) {
            if (index >= (target-1)){
                header = header.next;
            }
            tail = tail.next;
            index ++;
        }
        System.out.println(header.value);
    }

    public static void findMiddle(ListNode header){
        ListNode tail = header;
        while (tail.next !=null) {
            header = header.next;
            tail = tail.next.next;
        }
        System.out.println(header.value);
    }


    static ListNode reverseListDi(ListNode header) {
        if (header == null) {
            return null;
        }
        return reverseListDiCore(header, null);
    }


    static ListNode reverseListDiCore(ListNode header, ListNode prev) {
        if (header == null) return prev;

        ListNode temp = header.next;
        header.next = prev;
        prev = header;
        return reverseListDiCore(temp, prev);
    }


    public static ListNode revert3(ListNode header){

        ListNode prev = null;
        ListNode temp = null;

        while (header!=null){
            temp = header.next;
            header.next = prev;
            prev = header;
            header = temp;
        }
        return prev;
    }


    public static ListNode revert(ListNode header){
        if (header == null && header.next == null) return header;

        ListNode first = null;
        ListNode second = header;
        ListNode temp = null;
        while (second!= null){
            temp = second.next;
            second.next = first;
            first = second;
            second = temp;
        }

        return temp;
    }

    public static ListNode revert2(ListNode header){
        if (header == null && header.next == null) return header;

        ListNode first = null;
        ListNode second = header;
        ListNode tail = null;

        while (second!= null){

            ListNode next = second.next;

            if (next == null)
                tail = second;

            second.next = first;
            first = second;
            second = next;

//            tail = second.next;
//            second.next = first;
//            first = second;
//            second = tail;
        }

        return tail;

    }





    public static void addNode(ListNode header, ListNode newOne){
        if (header == null){
            header = newOne;
            return;
        }

        ListNode tail = header;
        while (tail.next !=null){
            tail = tail.next;
        }
        tail.next = newOne;

    }


}


//在O(1)时间内删除链表结点
public  ListNode deleteNode(ListNode head, ListNode toBeDeleted) {
        // 如果输入参数有空值就返回表头结点  
        if (head == null || toBeDeleted == null) {
            return head;
        }
        // 如果删除的是头结点，直接返回头结点的下一个结点  
        if (head == toBeDeleted) {
            return head.next;
        }
        // 下面的情况链表至少有两个结点  
        // 在多个节点的情况下，如果删除的是最后一个元素  
        if (toBeDeleted.next == null) {
            // 找待删除元素的前驱  
            ListNode tmp = head;
            while (tmp.next != toBeDeleted) {
                tmp = tmp.next;
            }
            // 删除待结点  
            tmp.next = null;
        }
        // 在多个节点的情况下，如果删除的是某个中间结点  
        else {
            // 将下一个结点的值输入当前待删除的结点  
            toBeDeleted.val= toBeDeleted.next.val;
            // 待删除的结点的下一个指向原先待删除下下个结点，即将待删除的下一个结点删除  
            toBeDeleted.next = toBeDeleted.next.next;
        }
        // 返回删除节点后的链表头结点  
        return head;
    }
